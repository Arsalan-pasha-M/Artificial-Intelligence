import heapq
 
class Node:
   def __init__(self, name, g=0, h=0, parent=None):
       self.name = name
       self.g = g  # Actual cost
       self.h = h  # Heuristic cost
       self.f = g + h  # Total cost
       self.parent = parent
 
   def __lt__(self, other):
       return self.f < other.f
 
def astar_search(graph, heuristics, start, goal):
   open_list = []
   closed_set = set()
 
   start_node = Node(start, g=0, h=heuristics[start])
   heapq.heappush(open_list, start_node)
 
   while open_list:
       current_node = heapq.heappop(open_list)
 
       if current_node.name == goal:
           path = []
           while current_node:
               path.append(current_node.name)
               current_node = current_node.parent
           return path[::-1]
 
       closed_set.add(current_node.name)
 
       for neighbor, cost in graph[current_node.name]:
           if neighbor in closed_set:
               continue
 
           g_cost = current_node.g + cost
           h_cost = heuristics[neighbor]
           neighbor_node = Node(neighbor, g=g_cost, h=h_cost, parent=current_node)
 
           if any(open_node.name == neighbor and open_node.f <= neighbor_node.f for open_node in open_list):
               continue
 
           heapq.heappush(open_list, neighbor_node)
 
   return None
 
# Graph: Node -> [(Neighbor, Cost)]
graph = {
   'A': [('B', 1), ('C', 4)],
   'B': [('D', 3)],
   'C': [('E', 5)],
   'D': [('F', 2), ('G', 4)],
   'E': [('G', 3)],
   'F': [('G', 1)],
   'G': []
}
 
# Heuristics from the image
heuristics = {
   'A': 5,
   'B': 6,
   'C': 4,
   'D': 3,
   'E': 3,
   'F': 1,
   'G': 0
}
 
# Perform A* Search
path = astar_search(graph, heuristics, 'A', 'G')
path
 
 
